# open Etiquette_Book.pdf and extract image from each page

import fitz  # PyMuPDF
import io
from PIL import Image

pdf_path = "Etiquette_Book.pdf"

# open the file
# pdf_file = fitz.open(pdf_path)

# # [(0, 1), (0, 1)]
# ranges = []

# # iterate over PDF pages
# for page_num in range(3, pdf_file.page_count - 4, 2):
#     page = pdf_file[page_num]
#     drawings = page.get_drawings()
#     drawing = drawings[0]
#     items = drawing["items"]
#     # get all y positions where x is 0 [("l", Point(0, 0), Point(0, 0)), ("l", Point(0, 0), Point(0, 0)), ...]
#     y_positions = [item[1].y for item in items if item[0] == "l" and item[1].x == 0]
#     ranges.append((min(y_positions), max(y_positions)))
#     # print(page_num + 1, items, y_positions)
#     print(page_num + 1, ranges[-1])

ranges = [(368.0, 389.0), (362.0, 383.0), (357.0, 378.0), (357.0, 372.0), (356.0, 372.0), (352.0, 368.0), (351.0, 367.0), (343.0, 364.0), (341.0, 361.0), (346.0, 362.0), (343.0, 365.0), (344.0, 365.0), (449.0, 491.0), (339.0, 360.0), (403.0, 508.0), (333.0, 355.0), (330.0, 514.0), (330.0, 419.0), (488.0, 509.0), (325.0, 367.0), (475.0, 496.0), (320.0, 346.0), (466.0, 482.0), (319.0, 339.0), (319.0, 334.0), (315.0, 336.0), (315.0, 330.0), (315.0, 331.0), (315.0, 331.0), (309.0, 325.0), (310.0, 326.0), (252.0, 326.0), (246.0, 409.0), (245.0, 428.0), (252.0, 441.0), (388.0, 451.0), (383.0, 441.0), (372.0, 404.0), (362.0, 389.0), (354.0, 375.0), (352.0, 373.0), (350.0, 366.0), (354.0, 370.0), (361.0, 387.0), (372.0, 398.0), (377.0, 413.0), (399.0, 420.0), (404.0, 425.0), (409.0, 420.0), (409.0, 414.0), (403.0, 408.0), (349.0, 370.0), (341.0, 383.0), (331.0, 389.0), (382.0, 393.0), (320.0, 357.0), (386.0, 401.0), (309.0, 325.0), (341.0, 352.0), (388.0, 404.0), (319.0, 340.0), (378.0, 393.0), (373.0, 383.0), (362.0, 378.0), (357.0, 367.0), (351.0, 362.0), (231.0, 246.0), (214.0, 267.0), (355.0, 376.0), (194.0, 289.0), (341.0, 388.0), (189.0, 305.0), (372.0, 399.0), (280.0, 322.0), (167.0, 193.0), (292.0, 381.0), (163.0, 189.0), (315.0, 373.0), (168.0, 189.0), (336.0, 357.0), (178.0, 204.0), (184.0, 210.0), (257.0, 267.0), (251.0, 271.0), (189.0, 205.0), (246.0, 340.0), (189.0, 210.0), (252.0, 347.0), (199.0, 210.0), (210.0, 220.0), (151.0, 151.0), (152.0, 168.0), (157.0, 173.0), (162.0, 287.0), (168.0, 310.0), (173.0, 320.0), (178.0, 325.0), (278.0, 331.0), (305.0, 326.0), (305.0, 320.0), (299.0, 315.0), (294.0, 310.0), (288.0, 304.0), (284.0, 294.0), (131.0, 141.0), (136.0, 278.0), (136.0, 284.0), (142.0, 289.0), (147.0, 299.0), (277.0, 303.0), (284.0, 299.0), (280.0, 296.0), (273.0, 288.0), (268.0, 284.0), (262.0, 273.0), (256.0, 267.0), (210.0, 241.0), (199.0, 252.0), (204.0, 252.0), (215.0, 262.0), (357.0, 368.0), (252.0, 263.0), (357.0, 373.0), (238.0, 253.0), (341.0, 362.0), (210.0, 241.0), (331.0, 352.0), (183.0, 214.0), (309.0, 341.0), (183.0, 220.0), (283.0, 324.0), (199.0, 315.0), (226.0, 299.0), (241.0, 284.0), (73.0, 157.0), (63.0, 168.0), (57.0, 184.0), (62.0, 193.0), (126.0, 210.0), (73.0, 89.0), (189.0, 220.0), (120.0, 136.0), (63.0, 78.0), (210.0, 231.0), (115.0, 135.0), (52.0, 73.0), (214.0, 235.0), (110.0, 125.0), (47.0, 68.0), (205.0, 226.0), (105.0, 120.0), (42.0, 63.0), (189.0, 210.0), (105.0, 115.0), (36.0, 52.0), (178.0, 193.0), (36.0, 47.0), (167.0, 178.0), (31.0, 42.0), (152.0, 168.0), (31.0, 36.0), (99.0, 120.0), (189.0, 194.0), (94.0, 142.0), (189.0, 199.0), (84.0, 147.0), (141.0, 189.0), (73.0, 89.0), (163.0, 178.0), (73.0, 84.0), (73.0, 78.0), (152.0, 173.0), (89.0, 105.0), (163.0, 178.0), (68.0, 126.0), (157.0, 173.0), (63.0, 78.0), (120.0, 163.0), (57.0, 68.0), (142.0, 157.0), (52.0, 57.0), (115.0, 120.0), (95.0, 132.0), (84.0, 136.0), (73.0, 126.0), (110.0, 120.0), (57.0, 78.0), (105.0, 115.0), (47.0, 63.0), (89.0, 105.0), (36.0, 52.0), (73.0, 89.0), (31.0, 47.0), (42.0, 84.0), (63.0, 89.0), (68.0, 94.0), (74.0, 105.0), (84.0, 105.0), (89.0, 110.0), (89.0, 100.0), (84.0, 94.0), (78.0, 94.0), (26.0, 84.0), (21.0, 73.0), (26.0, 84.0), (173.0, 189.0), (63.0, 84.0), (178.0, 194.0), (57.0, 78.0), (168.0, 184.0), (31.0, 68.0), (163.0, 178.0), (5.0, 52.0), (147.0, 168.0), (5.0, 52.0), (21.0, 147.0), (36.0, 136.0), (47.0, 126.0), (73.0, 110.0)]
min_y = int(min([r[0] for r in ranges]))
max_y = int(max([r[1] for r in ranges]))
print(min_y, max_y)

# create ppm file from ranges
# each entry is a column of pixels - all pixels shall be black from min_y to max_y and white otherwise

# # Optional Comments likes this one
# # The first line is the image header which contains the format followed by width and height
# P3 7 1
# # Second line contains the maximum value possible for each color point
# 255
# # Third line onwards, it contains the pixels represented in rows(7) and columns(1)
# 0 0 0
# 201 24 24 
# 24 201 45 
# 24 54 201
# 201 24 182 
# 24 201 178 
# 104 59 14

ppm_file = open("output.ppm", "w")
ppm_file.write("P3 {} {}\n255\n".format(ranges.__len__() * 2, max_y - min_y))
for y in range(max_y - min_y):
    for x in range(ranges.__len__()):
        if ranges[x][0] <= y + min_y <= ranges[x][1]:
            ppm_file.write("0 0 0\n")
            ppm_file.write("0 0 0\n")
        else:
            ppm_file.write("255 255 255\n")
            ppm_file.write("255 255 255\n")


    # SAVE IMAGE
    # img = page.get_images(full=True)[0]
    # xref = img[0]
    # base_image = pdf_file.extract_image(xref)
    # image_bytes = base_image["image"]
    # image = Image.open(io.BytesIO(image_bytes))
    # image.save(f"./imgs/page_{page_num + 1}.png")
